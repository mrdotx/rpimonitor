# path:       ~/.local/share/repos/rpimonitor/system.conf
# author:     klassiker [mrdotx]
# github:     https://github.com/mrdotx/rpimonitor
# date:       2020-03-25T23:28:29+0100

dynamic.1.name=uptime
dynamic.1.source=/proc/uptime
dynamic.1.regexp=(^\S+)
dynamic.1.postprocess=
dynamic.1.rrd=GAUGE

dynamic.2.name=net_send
dynamic.2.source=/sys/class/net/eth0/statistics/tx_bytes
dynamic.2.regexp=(.*)
dynamic.2.postprocess=
dynamic.2.rrd=DERIVE
dynamic.2.min=0

dynamic.3.name=net_received
dynamic.3.source=/sys/class/net/eth0/statistics/rx_bytes
dynamic.3.regexp=(.*)
dynamic.3.postprocess=$1*-1
dynamic.3.rrd=DERIVE
dynamic.3.max=0

dynamic.4.name=ssh_act
dynamic.4.source=systemctl status sshd.service | grep "Active: "
dynamic.4.regexp=(\(.*\))
dynamic.5.name=ssh_runtime
dynamic.5.source=systemctl status sshd.service | grep "Active: "
dynamic.5.regexp=; (.*)
dynamic.6.name=ssh_port
dynamic.6.source=netstat -nlt
dynamic.6.regexp=tcp?.*:(22).*LISTEN

dynamic.7.name=pihole_act
dynamic.7.source=systemctl status pihole-FTL.service | grep "Active: "
dynamic.7.regexp=(\(.*\))
dynamic.8.name=pihole_runtime
dynamic.8.source=systemctl status pihole-FTL.service | grep "Active: "
dynamic.8.regexp=; (.*)
dynamic.9.name=pihole_port
dynamic.9.source=netstat -nlt
dynamic.9.regexp=tcp?.*:(53).*LISTEN

dynamic.10.name=dnscrypt_act
dynamic.10.source=systemctl status dnscrypt-proxy.service | grep "Active: "
dynamic.10.regexp=(\(.*\))
dynamic.11.name=dnscrypt_runtime
dynamic.11.source=systemctl status dnscrypt-proxy.service | grep "Active: "
dynamic.11.regexp=; (.*)
dynamic.12.name=dnscrypt_port
dynamic.12.source=netstat -nlt
dynamic.12.regexp=tcp?.*:(5300).*LISTEN

dynamic.13.name=tor_act
dynamic.13.source=systemctl status tor.service | grep "Active: "
dynamic.13.regexp=(\(.*\))
dynamic.14.name=tor_runtime
dynamic.14.source=systemctl status tor.service | grep "Active: "
dynamic.14.regexp=; (.*)
dynamic.15.name=tor_port
dynamic.15.source=netstat -nlt
dynamic.15.regexp=tcp?.*:(9050).*LISTEN

dynamic.16.name=cups_act
dynamic.16.source=systemctl status org.cups.cupsd.service | grep "Active: "
dynamic.16.regexp=(\(.*\))
dynamic.17.name=cups_runtime
dynamic.17.source=systemctl status org.cups.cupsd.service | grep "Active: "
dynamic.17.regexp=; (.*)
dynamic.18.name=cups_port
dynamic.18.source=netstat -nlt
dynamic.18.regexp=tcp?.*:(631).*LISTEN

dynamic.19.name=nginx_act
dynamic.19.source=systemctl status nginx.service | grep "Active: "
dynamic.19.regexp=(\(.*\))
dynamic.20.name=nginx_runtime
dynamic.20.source=systemctl status nginx.service | grep "Active: "
dynamic.20.regexp=; (.*)
dynamic.21.name=http_port
dynamic.21.source=netstat -nlt
dynamic.21.regexp=tcp?.*:(80).*LISTEN
dynamic.22.name=https_port
dynamic.22.source=netstat -nlt
dynamic.22.regexp=tcp?.*:(443).*LISTEN

dynamic.23.name=rpimonitor_act
dynamic.23.source=systemctl status rpimonitord.service | grep "Active: "
dynamic.23.regexp=(\(.*\))
dynamic.24.name=rpimonitor_runtime
dynamic.24.source=systemctl status rpimonitord.service | grep "Active: "
dynamic.24.regexp=; (.*)
dynamic.25.name=rpimonitor_port
dynamic.25.source=netstat -nlt
dynamic.25.regexp=tcp?.*:(8888).*LISTEN

web.status.1.content.1.name=System
web.status.1.content.1.icon=swap.png
web.status.1.content.1.line.1="<table width=100%><tr height=20><td width=100>Local Time:</td><td><b>"+Clock( data.localtime)+"</b></td></tr>"
web.status.1.content.1.line.2="<tr height=20><td>Uptime:</td><td>"+Uptime(data.uptime)+"</td></tr></table>"

web.status.1.content.1.line.3="<table width=100%><tr height=20><td width=100>Ethernet:</td><td>Sent: <b>"+KMG(data.net_send)+"<i class='icon-arrow-up'></i></b> Received: <b>"+KMG(Math.abs(data.net_received))+"<i class='icon-arrow-down'></i></b></td></tr></table>"

web.status.1.content.1.line.4="<table width=100%><tr height=20><th width=100><b>Service</b></th><th><b>Status</b></th><th><b>Run Time</b></th><th><b>Port</b></th><th></th><th></th><th></th></tr>"
web.status.1.content.1.line.5="<tr height=20><td>ssh</td><td>"+Label(data.ssh_act,"=='(running)'","up","primary")+Label(data.ssh_act,"!='(running)'","down","default")+"</td><td>"+Label(data.ssh_act,"=='(running)'",data.ssh_runtime,"default")+Label(data.ssh_act,"!='(running)'","-","default")+"</td><td>22</td><td>"+Label(data.ssh_port,"==22","open","primary")+Label(data.ssh_port,"!=22","closed","default")+"</td><td></td><td></td></tr>"
web.status.1.content.1.line.6="<tr height=20><td>pihole</td><td>"+Label(data.pihole_act,"=='(running)'","up","primary")+Label(data.pihole_act,"!='(running)'","down","default")+"</td><td>"+Label(data.pihole_act,"=='(running)'",data.pihole_runtime,"default")+Label(data.pihole_act,"!='(running)'","-","default")+"</td><td>53</td><td>"+Label(data.pihole_port,"==53","open","primary")+Label(data.pihole_port,"!=53","closed","default")+"</td><td></td><td></td></tr>"
web.status.1.content.1.line.7="<tr height=20><td>dnscrypt</td><td>"+Label(data.dnscrypt_act,"=='(running)'","up","primary")+Label(data.dnscrypt_act,"!='(running)'","down","default")+"</td><td>"+Label(data.dnscrypt_act,"=='(running)'",data.dnscrypt_runtime,"default")+Label(data.dnscrypt_act,"!='(running)'","-","default")+"</td><td>5300</td><td>"+Label(data.dnscrypt_port,"==5300","open","primary")+Label(data.dnscrypt_port,"!=5300","closed","default")+"</td><td></td><td></td></tr>"
web.status.1.content.1.line.8="<tr height=20><td>tor</td><td>"+Label(data.tor_act,"=='(running)'","up","primary")+Label(data.tor_act,"!='(running)'","down","default")+"</td><td>"+Label(data.tor_act,"=='(running)'",data.tor_runtime,"default")+Label(data.tor_act,"!='(running)'","-","default")+"</td><td>9050</td><td>"+Label(data.tor_port,"==9050","open","primary")+Label(data.tor_port,"!=9050","closed","default")+"</td><td></td><td></td></tr>"
web.status.1.content.1.line.9="<tr height=20><td>cups</td><td>"+Label(data.cups_act,"=='(running)'","up","primary")+Label(data.cups_act,"!='(running)'","down","default")+"</td><td>"+Label(data.cups_act,"=='(running)'",data.cups_runtime,"default")+Label(data.cups_act,"!='(running)'","-","default")+"</td><td>631</td><td>"+Label(data.cups_port,"==631","open","primary")+Label(data.cups_port,"!=631","closed","default")+"</td><td></td><td></td></tr>"
web.status.1.content.1.line.10="<tr height=20><td>nginx</td><td>"+Label(data.nginx_act,"=='(running)'","up","primary")+Label(data.nginx_act,"!='(running)'","down","default")+"</td><td>"+Label(data.nginx_act,"=='(running)'",data.nginx_runtime,"default")+Label(data.nginx_act,"!='(running)'","-","default")+"</td><td>80</td><td>"+Label(data.http_port,"==80","open","primary")+Label(data.http_port,"!=80","closed","default")+"</td><td>443</td><td>"+Label(data.https_port,"==443","open","primary")+Label(data.https_port,"!=443","closed","default")+"</td></tr>"
web.status.1.content.1.line.11="<tr height=20><td>rpimonitor</td><td>"+Label(data.rpimonitor_act,"=='(running)'","up","primary")+Label(data.rpimonitor_act,"!='(running)'","down","default")+"</td><td>"+Label(data.rpimonitor_act,"=='(running)'",data.rpimonitor_runtime,"default")+Label(data.rpimonitor_act,"!='(running)'","-","default")+"</td><td>8888</td><td>"+Label(data.rpimonitor_port,"==8888","open","primary")+Label(data.rpimonitor_port,"!=8888","closed","default")+"</td><td></td><td></td></tr></table>"

web.statistics.1.content.1.name=Uptime
web.statistics.1.content.1.graph.1=uptime
web.statistics.1.content.1.graph_options.yaxis={ min:0, tickFormatter: function (v) { if (v > 86400) return (Math.round(v*10/60/60/24)/10) + " d" ; if (v > 3600) return (Math.round(v*10/60/60)/10) + " h" ; else return v + " s" }, }
web.statistics.1.content.1.ds_graph_options.uptime.label=Uptime (s/h/d)
web.statistics.1.content.1.ds_graph_options.uptime.color="#ff00ff"

web.statistics.1.content.2.name=Network
web.statistics.1.content.2.graph.1=net_send
web.statistics.1.content.2.graph.2=net_received
web.statistics.1.content.2.graph_options.yaxis={ tickFormatter: function (v) { if (Math.abs(v) > 1048576) return (Math.round(v*10/1024/1024)/10) + " MiB/s" ; if (Math.abs(v) > 1024) return (Math.round(v*10/1024)/10) + " KiB/s" ; else return v + " B/s" }, }
web.statistics.1.content.2.ds_graph_options.net_send.label=Upload bandwidth (bytes)
web.statistics.1.content.2.ds_graph_options.net_send.lines={ fill: true }
web.statistics.1.content.2.ds_graph_options.net_send.color="#9900ff"
web.statistics.1.content.2.ds_graph_options.net_received.label=Download bandwidth (bytes)
web.statistics.1.content.2.ds_graph_options.net_received.lines={ fill: true }
web.statistics.1.content.2.ds_graph_options.net_received.color="#0000ff"
